#include <array>
#include <cstdint>


struct Move {
    std::array<uint8_t, 8> corner_pos;
    std::array<uint8_t, 8> corner_ori;
    std::array<uint8_t, 12> edge_pos;
    std::array<uint8_t, 12> edge_ori;

    bool operator==(const Move& other) const noexcept {
        return corner_pos == other.corner_pos &&
               corner_ori == other.corner_ori &&
               edge_pos   == other.edge_pos &&
               edge_ori   == other.edge_ori;
    }
};

struct MoveHash {
    size_t operator()(const Move& m) const noexcept {
        size_t h = 0;
        for (int i = 0; i < 8; ++i) {
            h = h * 31 + m.corner_pos[i];
            h = h * 31 + m.corner_ori[i];
        }
        for (int i = 0; i < 12; ++i) {
            h = h * 31 + m.edge_pos[i];
            h = h * 31 + m.edge_ori[i];
        }
        return h;
    }
};

struct MoveEqual {
    bool operator()(const Move& a, const Move& b) const noexcept {
        return a == b;
    }
};


constexpr Move IDENTITY = {
    {0,1,2,3,4,5,6,7},
    {0,0,0,0,0,0,0,0},
    {0,1,2,3,4,5,6,7,8,9,10,11},
    {0,0,0,0,0,0,0,0,0,0,0,0}
};

// ----------------------- U ---------------------------

constexpr Move U = {
    {3,0,1,2,4,5,6,7},
    {0,0,0,0,0,0,0,0},
    {3,0,1,2,4,5,6,7,8,9,10,11},
    {1,1,1,1,0,0,0,0,0,0,0,0}
};

constexpr Move U2 = {
    {2,3,0,1,4,5,6,7},
    {0,0,0,0,0,0,0,0},
    {2,3,0,1,4,5,6,7,8,9,10,11},
    {0,0,0,0,0,0,0,0,0,0,0,0}
};

constexpr Move U_ = {
    {1,2,3,0,4,5,6,7},
    {0,0,0,0,0,0,0,0},
    {1,2,3,0,4,5,6,7,8,9,10,11},
    {1,1,1,1,0,0,0,0,0,0,0,0}
};

// ----------------------- D ---------------------------

constexpr Move D = {
    {0,1,2,3,5,6,7,4},
    {0,0,0,0,0,0,0,0},
    {0,1,2,3,4,5,6,7,9,10,11,8},
    {0,0,0,0,0,0,0,0,1,1,1,1}
};

constexpr Move D2 = {
    {0,1,2,3,6,7,4,5},
    {0,0,0,0,0,0,0,0},
    {0,1,2,3,4,5,6,7,10,11,8,9},
    {0,0,0,0,0,0,0,0,0,0,0,0}
};

constexpr Move D_ = {
    {0,1,2,3,7,4,5,6},
    {0,0,0,0,0,0,0,0},
    {0,1,2,3,4,5,6,7,11,8,9,10},
    {0,0,0,0,0,0,0,0,1,1,1,1}
};

// ----------------------- R ---------------------------

constexpr Move R = {
    {0,1,3,7,4,5,2,6},
    {0,0,1,2,0,0,2,1},
    {0,1,2,7,4,5,3,11,8,9,10,6},
    {0,0,0,1,0,0,1,1,0,0,0,1}
};

constexpr Move R2 = {
    {0,1,7,6,4,5,3,2},
    {0,0,0,0,0,0,0,0},
    {0,1,2,11,4,5,7,6,8,9,10,3},
    {0,0,0,0,0,0,0,0,0,0,0,0}
};

constexpr Move R_ = {
    {0,1,6,2,4,5,7,3},
    {0,0,1,2,0,0,2,1},
    {0,1,2,6,4,5,11,3,8,9,10,7},
    {0,0,0,1,0,0,1,1,0,0,0,1}
};

// ----------------------- L ---------------------------

constexpr Move L = {
    {1,5,2,3,0,4,6,7},
    {1,2,0,0,2,1,0,0},
    {0,5,2,3,1,9,6,7,8,4,10,11},
    {0,1,0,0,1,1,0,0,0,1,0,0}
};

constexpr Move L2 = {
    {5,4,2,3,1,0,6,7},
    {0,0,0,0,0,0,0,0},
    {0,9,2,3,5,4,6,7,8,1,10,11},
    {0,0,0,0,0,0,0,0,0,0,0,0}
};

constexpr Move L_ = {
    {4,0,2,3,5,1,6,7},
    {1,2,0,0,2,1,0,0},
    {0,4,2,3,9,1,6,7,8,5,10,11},
    {0,1,0,0,1,1,0,0,0,1,0,0}
};

// ----------------------- F ---------------------------

constexpr Move F = {
    {4,1,2,0,7,5,6,3},
    {2,0,0,1,1,0,0,2},
    {4,1,2,3,8,5,6,0,7,9,10,11},
    {1,0,0,0,1,0,0,1,1,0,0,0}
};

constexpr Move F2 = {
    {7,1,2,4,3,5,6,0},
    {0,0,0,0,0,0,0,0},
    {8,1,2,3,7,5,6,4,0,9,10,11},
    {0,0,0,0,0,0,0,0,0,0,0,0}
};

constexpr Move F_ = {
    {3,1,2,7,0,5,6,4},
    {2,0,0,1,1,0,0,2},
    {7,1,2,3,0,5,6,8,4,9,10,11},
    {1,0,0,0,1,0,0,1,1,0,0,0}
};

// ----------------------- B ---------------------------

constexpr Move B = {
    {0,2,6,3,4,1,5,7},
    {0,1,2,0,0,2,1,0},
    {0,1,6,3,4,2,10,7,8,9,5,11},
    {0,0,1,0,0,1,1,0,0,0,1,0}
};

constexpr Move B2 = {
    {0,6,5,3,4,2,1,7},
    {0,0,0,0,0,0,0,0},
    {0,1,10,3,4,6,5,7,8,9,2,11},
    {0,0,0,0,0,0,0,0,0,0,0,0}
};

constexpr Move B_ = {
    {0,5,1,3,4,6,2,7},
    {0,1,2,0,0,2,1,0},
    {0,1,5,3,4,10,2,7,8,9,6,11},
    {0,0,1,0,0,1,1,0,0,0,1,0}
};


// all possible moves (uses HTM, so half turns allowed, but slices are not)
constexpr std::array<Move, 18> legal_moves = {U, U2, U_, D, D2, D_, R, R2, R_, L, L2, L_, F, F2, F_, B, B2, B_};